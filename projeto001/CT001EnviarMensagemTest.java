// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class CT001EnviarMensagemTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void cT001EnviarMensagem() {
    driver.get("https://livros.inoveteste.com.br/");
    driver.findElement(By.linkText("Menu")).click();
    driver.findElement(By.cssSelector(".sidr-inner > #nav-wrap > #primary_menu > #menu-item-80 span")).click();
    assertThat(driver.findElement(By.cssSelector(".wpb_column:nth-child(1) h1")).getText(), is("Envie uma mensagem"));
    {
      List<WebElement> elements = driver.findElements(By.name("your-name"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.name("your-email"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.name("your-subject"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.name("your-message"));
      assert(elements.size() > 0);
    }
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".wpcf7-submit"));
      assert(elements.size() > 0);
    }
    driver.findElement(By.cssSelector(".wpcf7-submit")).click();
    assertThat(driver.findElement(By.cssSelector(".your-name > .wpcf7-not-valid-tip")).getText(), is("O campo é obrigatório."));
    assertThat(driver.findElement(By.cssSelector(".your-email > .wpcf7-not-valid-tip")).getText(), is("O campo é obrigatório."));
    assertThat(driver.findElement(By.cssSelector(".your-subject > .wpcf7-not-valid-tip")).getText(), is("O campo é obrigatório."));
    assertThat(driver.findElement(By.cssSelector(".your-message > .wpcf7-not-valid-tip")).getText(), is("O campo é obrigatório."));
    assertThat(driver.findElement(By.cssSelector(".wpcf7-response-output")).getText(), is("Um ou mais campos possuem um erro. Verifique e tente novamente."));
    driver.findElement(By.name("your-name")).click();
    driver.findElement(By.name("your-name")).sendKeys("Edson Souza");
    driver.findElement(By.name("your-email")).click();
    driver.findElement(By.name("your-email")).sendKeys("edsonfrs@gmail.com");
    driver.findElement(By.name("your-subject")).click();
    driver.findElement(By.name("your-subject")).sendKeys("teste ");
    driver.findElement(By.name("your-message")).click();
    driver.findElement(By.name("your-message")).sendKeys("Mensagem de teste");
    driver.findElement(By.cssSelector(".wpcf7-submit")).click();
    assertThat(driver.findElement(By.cssSelector(".wpcf7-response-output")).getText(), is("Agradecemos a sua mensagem. Responderemos em breve."));
  }
}
